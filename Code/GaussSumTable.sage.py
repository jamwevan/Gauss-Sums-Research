

# This file was *autogenerated* from the file GaussSumTable.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_3 = Integer(3)
from sage.all import GF, e, pi, I, latex

class GaussSumTable:
    def __init__(self, q, additive_character_generator, multiplicative_character_generator):
        self.q = q
        self.additive_character_generator = additive_character_generator
        self.multiplicative_character_generator = multiplicative_character_generator

        self.finite_field = GF(q**_sage_const_2 )
        self.generator = self.finite_field.gen()
        self.finite_field_elements = list(self.finite_field)
        self.finite_field_multiplicative_group = [x for x in self.finite_field_elements if x != _sage_const_0 ]

        self.table = [[_sage_const_0  for _ in range(q - _sage_const_1 )] for _ in range(q**_sage_const_2  - _sage_const_1 )]
        self.compute_gauss_sum_table()

    def compute_gauss_sum_table(self):
        for theta in range(self.q**_sage_const_2  - _sage_const_1 ):
            for alpha in range(self.q - _sage_const_1 ):
                self.table[theta][alpha] = self.compute_gauss_sum(theta, alpha)

    def compute_gauss_sum(self, theta, alpha):
        total = _sage_const_0 
        for x in self.finite_field_multiplicative_group:
            additive_character_value = self.additive_character_generator**self.trace(x)
            theta_character_value = self.multiplicative_character_generator**(theta * self.log(x))
            alpha_character_value = self.multiplicative_character_generator**(alpha * self.get_norm_log(x))
            total += additive_character_value * theta_character_value * alpha_character_value
        return total

    def get_norm_log(self, x):
        return (self.q + _sage_const_1 ) * self.log(x)

    def log(self, x):
        return x.log(self.generator) if x != _sage_const_0  else _sage_const_0 

    def trace(self, x):
        return x.trace()

def complex_gauss_sum_table(q):
    prime_power_result = q.is_prime_power(get_data=True)
    if prime_power_result[_sage_const_1 ] == _sage_const_0 :
        raise ValueError("Expected a prime power!")
    p = prime_power_result[_sage_const_0 ]

    return GaussSumTable(q, e**(_sage_const_2  * pi * I / p), e**(_sage_const_2  * pi * I / (q*q - _sage_const_1 )))

def save_gauss_sum_table_as_html(table, filename="GaussSumTable.html"):
    """
    Saves the Gauss sum table in an HTML file with MathJax LaTeX rendering.
    """
    with open(filename, "w") as f:
        f.write("<html><head><title>Gauss Sum Table</title>\n")
        f.write('<script type="text/javascript" async '
                'src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?'
                'config=TeX-AMS-MML_HTMLorMML"></script>\n')
        f.write('<style>table { border-collapse: collapse; width: 100%; }')
        f.write('th, td { border: 1px solid black; padding: 5px; text-align: center; font-size: 18px; }')
        f.write('th { background-color: #f2f2f2; }</style>\n')
        f.write("</head><body>\n")

        f.write("<h2>Gauss Sum Table</h2>\n")
        f.write('<div style="overflow-x:auto;">')  # Scrollable if needed
        f.write('<table>\n')

        # Header row
        f.write("<tr><th>\\( \\theta \\backslash \\alpha \\)</th>")
        for alpha in range(len(table[_sage_const_0 ])):
            f.write(f"<th>\\( \\alpha = {alpha} \\)</th>")
        f.write("</tr>\n")

        # Data rows with LaTeX rendering
        for theta, row in enumerate(table):
            f.write(f"<tr><td>\\( {theta} \\)</td>")
            for value in row:
                f.write(f"<td>\\( {latex(value)} \\)</td>")
            f.write("</tr>\n")

        f.write("</table>\n</div>\n</body></html>\n")

    print(f"Saved Gauss Sum Table as {filename}")

# Generate the Gauss Sum Table
gauss_sum_table_object = complex_gauss_sum_table(_sage_const_3 )
table_of_gauss_sum = gauss_sum_table_object.table

# Save as an HTML file
save_gauss_sum_table_as_html(table_of_gauss_sum)

