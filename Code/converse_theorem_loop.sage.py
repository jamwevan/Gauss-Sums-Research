

# This file was *autogenerated* from the file converse_theorem_loop.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_3 = Integer(3); _sage_const_64 = Integer(64)# This file was *autogenerated* from the file converse_theorem_loop.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(_sage_const_2 )
_sage_const_0 = Integer(_sage_const_0 )
_sage_const_1 = Integer(_sage_const_1 )
_sage_const_3 = Integer(_sage_const_3 )

from sage.all import is_prime, carmichael_lambda, GF, expand
from collections import defaultdict

# -------------------------------------------------------------------------
def max_power(N, l):
    m = _sage_const_0
    while N % l == _sage_const_0:
        N //= l
        m += _sage_const_1
    return m

# -------------------------------------------------------------------------
def partition_by_mod_q_minus_l_power(group, q, l):
    mod_dict = defaultdict(list)
    m = max_power(q - _sage_const_1 , l)
    mod_base = (q - _sage_const_1 ) // (l**m)
    for i in group:
        mod_val = i % mod_base
        mod_dict[mod_val].append(i)
    subgroups = []
    for mod_val in sorted(mod_dict.keys()):
        subgroups.append(sorted(mod_dict[mod_val]))
    return subgroups

# -------------------------------------------------------------------------
class GaussSumTable:
    def __init__(self, q, additive_character_generator, multiplicative_character_generator, l):
        self.q = q
        self.l = l
        self.additive_character_generator = additive_character_generator
        self.multiplicative_character_generator = multiplicative_character_generator
        self.finite_field = GF(q**_sage_const_2)
        self.generator = self.finite_field.gen()
        self.finite_field_elements = list(self.finite_field)
        self.finite_field_multiplicative_group = [x for x in self.finite_field_elements if x != _sage_const_0]

        N_theta = q**_sage_const_2 - _sage_const_1
        m_theta = max_power(N_theta, l)
        self.theta_range = N_theta // (l**m_theta)

        N_alpha = q - _sage_const_1
        m_alpha = max_power(N_alpha, l)
        self.alpha_range = N_alpha // (l**m_alpha)

        self.table = [[_sage_const_0 for _ in range(self.alpha_range)] for _ in range(self.theta_range)]
        self.compute_gauss_sum_table()

    def compute_gauss_sum_table(self):
        for theta in range(self.theta_range):
            for alpha in range(self.alpha_range):
                self.table[theta][alpha] = self.compute_gauss_sum(theta, alpha)

    def compute_gauss_sum(self, theta, alpha):
        total = _sage_const_0
        for x in self.finite_field_multiplicative_group:
            additive_character_value = self.additive_character_generator**self.trace(x)
            theta_character_value = self.multiplicative_character_generator**(theta * self.log(x))
            alpha_character_value = self.multiplicative_character_generator**(alpha * self.get_norm_log(x))
            total += additive_character_value * theta_character_value * alpha_character_value
        return total

    def get_norm_log(self, x):
        return (self.q + _sage_const_1) * self.log(x)

    def log(self, x):
        return x.log(self.generator) if x != _sage_const_0 else _sage_const_0

    def trace(self, x):
        return x.trace()

    def find_identical_rows(self):
        n = len(self.table)
        visited = set()
        groups = []

        for i in range(n):
            if i in visited:
                continue
            group = [i]
            visited.add(i)
            for j in range(i + _sage_const_1, n):
                if j in visited:
                    continue
                match = True
                for k in range(len(self.table[i])):
                    if expand(self.table[i][k] - self.table[j][k]) != _sage_const_0:
                        match = False
                        break
                if match:
                    group.append(j)
                    visited.add(j)
            if len(group) > _sage_const_1:
                groups.append(group)
        return groups

    def find_counterexamples(self, l, q):
        counterexamples = []
        if (q - _sage_const_1) % l == _sage_const_0:
            identical_groups = self.find_identical_rows()
            if identical_groups:
                identical_groups = sorted(identical_groups, key=len, reverse=True)
                counterexamples.append((l, q, identical_groups))
        return counterexamples

# -------------------------------------------------------------------------
def fL_bar_gauss_sum_table(q, l):
    if not is_prime(l):
        raise ValueError("l must be a prime number!")
    prime_power_result = q.is_prime_power(get_data=True)
    if prime_power_result[_sage_const_1] == _sage_const_0:
        raise ValueError("Expected q to be a prime power!")
    p = prime_power_result[_sage_const_0]
    N = p * (q * q - _sage_const_1)
    m = max_power(N, l)
    N_prime = N // (l**m)
    c = carmichael_lambda(N_prime)
    F = GF(l**c)
    h = F.gen()
    return GaussSumTable(
        q,
        h**((l**c - _sage_const_1) // p),
        h**((p * (l**c - _sage_const_1)) // N_prime),
        l
    )

# -------------------------------------------------------------------------
def is_q_of_the_form_1_plus_2_l_j(q, l):
    if q <= _sage_const_1 :
        return False
    diff = q - _sage_const_1
    if diff % _sage_const_2 != _sage_const_0:
        return False
    diff //= _sage_const_2
    if diff == _sage_const_0:
        return False
    while diff % l == _sage_const_0:
        diff //= l
    return diff == _sage_const_1

# -------------------------------------------------------------------------
def print_counterexample_table(rows):
    if not rows:
        print("No counterexamples with restricted group size >= 3 found in the given ranges.")
        return

    rows.sort(key=lambda row: (row[_sage_const_0 ], row[_sage_const_1 ]))

    print("\nCounterexamples (where largest restricted subgroup has size >= 3):\n")
    line = "-" * _sage_const_64 
    print(line)
    print("| {:^9} | {:^21} | {:^23} |".format(
        "(ℓ, q)",
        "θ₁|𝔽*_q = θ₂|𝔽*_q",
        "q = 1 + 2 ℓ^j"
    ))
    print(line)
    for (l_val, q_val, subgroup_size, bool_val) in rows:
        print("| {:^9} | {:^21} | {:^23} |".format(
            f"({l_val}, {q_val})",
            str(subgroup_size),
            "True" if bool_val else "False"
        ))
    print(line)

# -------------------------------------------------------------------------
if __name__ == "__main__":
    l_upper = Integer(input("Enter the upper bound for prime l: "))
    q_upper = Integer(input("Enter the upper bound for prime-power q: "))

    table_rows = []

    for l_candidate in range(_sage_const_2 , l_upper + _sage_const_1 ):
        l_val = Integer(l_candidate)
        if is_prime(l_val):
            for q_candidate in range(_sage_const_2 , q_upper + _sage_const_1 ):
                q_candidate_sage = Integer(q_candidate)
                prime_power_data = q_candidate_sage.is_prime_power(get_data=True)
                if prime_power_data[_sage_const_1 ] != _sage_const_0:
                    q_val = q_candidate_sage
                    gauss_sum_table_object = fL_bar_gauss_sum_table(q_val, l_val)
                    counterexamples = gauss_sum_table_object.find_counterexamples(l_val, q_val)
                    for (_, _, identical_groups) in counterexamples:
                        largest_subgroup_size = _sage_const_0 
                        for group in identical_groups:
                            mod_subgroups = partition_by_mod_q_minus_l_power(group, q_val, l_val)
                            group_max = max(len(s) for s in mod_subgroups)
                            largest_subgroup_size = max(largest_subgroup_size, group_max)
                        if largest_subgroup_size >= _sage_const_3 :
                            form_check = is_q_of_the_form_1_plus_2_l_j(q_val, l_val)
                            table_rows.append((l_val, q_val, largest_subgroup_size, form_check))

    print_counterexample_table(table_rows)

