# This file was *autogenerated* from the file fL_bar.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_9 = Integer(9); _sage_const_5 = Integer(5)
from sage.all import is_prime, carmichael_lambda, GF

class GaussSumTable:
    def __init__(self, q, additive_character_generator, multiplicative_character_generator):
        self.q = q
        self.additive_character_generator = additive_character_generator
        self.multiplicative_character_generator = multiplicative_character_generator
        self.finite_field = GF(q**_sage_const_2 )
        self.generator = self.finite_field.gen()
        self.finite_field_elements = list(self.finite_field)
        self.finite_field_multiplicative_group = [x for x in self.finite_field_elements if x != _sage_const_0 ]
        self.table = [[_sage_const_0  for _ in range(q - _sage_const_1 )] for _ in range(q**_sage_const_2  - _sage_const_1 )]
        self.compute_gauss_sum_table()

    def compute_gauss_sum_table(self):
        for theta in range(self.q**_sage_const_2  - _sage_const_1 ):
            for alpha in range(self.q - _sage_const_1 ):
                self.table[theta][alpha] = self.compute_gauss_sum(theta, alpha)

    def compute_gauss_sum(self, theta, alpha):
        total = _sage_const_0
        for x in self.finite_field_multiplicative_group:
            additive_character_value = self.additive_character_generator**self.trace(x)
            theta_character_value = self.multiplicative_character_generator**(theta * self.log(x))
            alpha_character_value = self.multiplicative_character_generator**(alpha * self.get_norm_log(x))
            total += additive_character_value * theta_character_value * alpha_character_value
        return total

    def get_norm_log(self, x):
        return (self.q + _sage_const_1 ) * self.log(x)

    def log(self, x):
        return x.log(self.generator) if x != _sage_const_0  else _sage_const_0

    def trace(self, x):
        return x.trace()
    
    def find_identical_rows(self):
        row_patterns = {}
        for i, row in enumerate(self.table):
            row_tuple = tuple(sorted(row))
            row_counts = tuple(sorted([row.count(v) for v in set(row)]))
            key = (row_tuple, row_counts)
            
            if key in row_patterns:
                row_patterns[key].append(i)
            else:
                row_patterns[key] = [i]
        
        identical_groups = [indices for indices in row_patterns.values() if len(indices) > 1]
        return identical_groups

    def find_counterexamples(self):
        counterexamples = []
        for l, q in [(2, 5), (3, 7)]:
            identical_groups = self.find_identical_rows()
            if identical_groups:
                counterexamples.append((l, q))
        return counterexamples


def fL_bar_gauss_sum_table(q, l):
    if not is_prime(l):
        raise ValueError("l must be a prime number!")
    prime_power_result = q.is_prime_power(get_data=True)
    if prime_power_result[_sage_const_1 ] == _sage_const_0 :
        raise ValueError("Expected a prime power!")
    p = prime_power_result[_sage_const_0 ]
    N = p * (q*q - _sage_const_1 )
    m = max_power(N, l)
    N_prime = N // (l**m)
    c = carmichael_lambda(N_prime)
    F = GF(l**c)
    h = F.gen()
    return GaussSumTable(q, h**((l**c - _sage_const_1 ) // p), h**((p * (l**c - _sage_const_1 )) // N_prime))


def max_power(N, l):
    m = _sage_const_0
    while N % l == _sage_const_0 :
        N //= l
        m += _sage_const_1
    return m


gauss_sum_table_object = fL_bar_gauss_sum_table(_sage_const_9 , _sage_const_5 )
table_of_gauss_sum = gauss_sum_table_object.table
print("Counterexamples where the converse theorem fails:")
print(gauss_sum_table_object.find_counterexamples())
