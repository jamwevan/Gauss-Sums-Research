# This file was *autogenerated* from the file converse_theorem_loop.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2)
_sage_const_0 = Integer(0)
_sage_const_1 = Integer(1)
_sage_const_3 = Integer(3)

from sage.all import is_prime, carmichael_lambda, GF, expand

# -------------------------------------------------------------------------
# GaussSumTable Class
# -------------------------------------------------------------------------
class GaussSumTable:
    def __init__(self, q, additive_character_generator, multiplicative_character_generator, l):
        self.q = q
        self.l = l  # store prime l for range adjustments
        self.additive_character_generator = additive_character_generator
        self.multiplicative_character_generator = multiplicative_character_generator
        self.finite_field = GF(q**_sage_const_2)
        self.generator = self.finite_field.gen()
        self.finite_field_elements = list(self.finite_field)
        self.finite_field_multiplicative_group = [
            x for x in self.finite_field_elements if x != _sage_const_0
        ]
        # Compute new ranges for theta and alpha by removing the l-power factors.
        N_theta = q**_sage_const_2 - _sage_const_1   # Order of F_{q^2}^*
        m_theta = max_power(N_theta, l)
        self.theta_range = N_theta // (l**m_theta)
        
        N_alpha = q - _sage_const_1  # Order of F_q^*
        m_alpha = max_power(N_alpha, l)
        self.alpha_range = N_alpha // (l**m_alpha)
        
        # Create the table with adjusted dimensions.
        self.table = [
            [_sage_const_0 for _ in range(self.alpha_range)]
            for _ in range(self.theta_range)
        ]
        self.compute_gauss_sum_table()

    def compute_gauss_sum_table(self):
        for theta in range(self.theta_range):
            for alpha in range(self.alpha_range):
                self.table[theta][alpha] = self.compute_gauss_sum(theta, alpha)

    def compute_gauss_sum(self, theta, alpha):
        total = _sage_const_0
        for x in self.finite_field_multiplicative_group:
            additive_character_value = self.additive_character_generator**self.trace(x)
            theta_character_value = self.multiplicative_character_generator**(theta * self.log(x))
            alpha_character_value = self.multiplicative_character_generator**(alpha * self.get_norm_log(x))
            total += additive_character_value * theta_character_value * alpha_character_value
        return total

    def get_norm_log(self, x):
        return (self.q + _sage_const_1) * self.log(x)

    def log(self, x):
        return x.log(self.generator) if x != _sage_const_0 else _sage_const_0

    def trace(self, x):
        return x.trace()

    def find_identical_rows(self):
        n = len(self.table)
        visited = set()
        groups = []

        for i in range(n):
            if i in visited:
                continue
            group = [i]
            visited.add(i)
            for j in range(i + _sage_const_1, n):
                if j in visited:
                    continue
                match = True
                for k in range(len(self.table[i])):
                    if expand(self.table[i][k] - self.table[j][k]) != _sage_const_0:
                        match = False
                        break
                if match:
                    group.append(j)
                    visited.add(j)
            if len(group) > _sage_const_1:
                groups.append(group)
        return groups

    def find_counterexamples(self, l, q):
        """
        Return a list of (l, q, identical_groups) if (q-1) is divisible by l
        and there are identical rows. identical_groups is sorted by descending size.
        """
        counterexamples = []
        if (q - _sage_const_1) % l == _sage_const_0:
            identical_groups = self.find_identical_rows()
            if identical_groups:
                identical_groups = sorted(identical_groups, key=len, reverse=True)
                counterexamples.append((l, q, identical_groups))
        return counterexamples

# -------------------------------------------------------------------------
# Helper Functions
# -------------------------------------------------------------------------
def fL_bar_gauss_sum_table(q, l):
    if not is_prime(l):
        raise ValueError("l must be a prime number!")
    prime_power_result = q.is_prime_power(get_data=True)
    if prime_power_result[_sage_const_1] == _sage_const_0:
        raise ValueError("Expected q to be a prime power!")
    p = prime_power_result[_sage_const_0]
    N = p * (q * q - _sage_const_1)
    m = max_power(N, l)
    N_prime = N // (l**m)
    c = carmichael_lambda(N_prime)
    F = GF(l**c)
    h = F.gen()
    return GaussSumTable(
        q,
        h**((l**c - _sage_const_1) // p),
        h**((p * (l**c - _sage_const_1)) // N_prime),
        l
    )

def max_power(N, l):
    m = _sage_const_0
    while N % l == _sage_const_0:
        N //= l
        m += _sage_const_1
    return m

def is_q_of_the_form_1_plus_2_l_j(q, l):
    """
    Return True if q == 1 + 2*(l^j) for some j >= 1.
    Otherwise, return False.
    """
    if q <= 1:
        return False
    diff = q - _sage_const_1
    if diff % _sage_const_2 != _sage_const_0:
        return False
    diff //= _sage_const_2
    if diff == _sage_const_0:
        return False
    while diff % l == _sage_const_0:
        diff //= l
    return diff == _sage_const_1

# -------------------------------------------------------------------------
# Nicely aligned table printing
# -------------------------------------------------------------------------
def print_counterexample_table(rows):
    """
    Print a cleanly aligned ASCII table of counterexamples.
    rows is a list of tuples (l_val, q_val, largest_size, form_check).
    """
    if not rows:
        print("No counterexamples with group size >= 3 found in the given ranges.")
        return

    # Sort by (l, q)
    rows.sort(key=lambda row: (row[0], row[1]))

    print("\nCounterexamples (where largest identical group has size >= 3)\n")
    line = "-" * 66
    print(line)
    # Header
    print("| {0:<10} | {1:<18} | {2:<17} |".format("(l, q)", "Largest Group Size", "q = 1 + 2 l^j ?"))
    print(line)
    # Rows
    for (l_val, q_val, size_val, bool_val) in rows:
        # Convert to strings
        lq_str = f"({l_val}, {q_val})"
        size_str = str(size_val)
        bool_str = str(bool_val)
        print("| {0:<10} | {1:<18} | {2:<17} |".format(lq_str, size_str, bool_str))
    print(line)

# -------------------------------------------------------------------------
# MAIN ENTRY POINT
# -------------------------------------------------------------------------
if __name__ == "__main__":
    l_upper = Integer(input("Enter the upper bound for prime l: "))
    q_upper = Integer(input("Enter the upper bound for prime-power q: "))

    table_rows = []

    # Loop over all primes l in [2, l_upper]
    for l_candidate in range(2, l_upper + 1):
        l_val = Integer(l_candidate)
        if is_prime(l_val):
            # Loop over all integers q_candidate in [2, q_upper]
            for q_candidate in range(2, q_upper + 1):
                q_candidate_sage = Integer(q_candidate)
                prime_power_data = q_candidate_sage.is_prime_power(get_data=True)
                if prime_power_data[1] != _sage_const_0:  # it's a prime power
                    q_val = q_candidate_sage
                    # Build the GaussSumTable and look for identical groups
                    gauss_sum_table_object = fL_bar_gauss_sum_table(q_val, l_val)
                    counterexamples = gauss_sum_table_object.find_counterexamples(l_val, q_val)
                    for (_, _, identical_groups) in counterexamples:
                        largest_size = len(identical_groups[0])
                        if largest_size >= _sage_const_3:
                            form_check = is_q_of_the_form_1_plus_2_l_j(q_val, l_val)
                            table_rows.append((l_val, q_val, largest_size, form_check))

    # Print the final table
    print_counterexample_table(table_rows)
